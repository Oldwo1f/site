<!DOCTYPE html>
<html>

<head>

    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">

    <title>madmin</title>

    <!--STYLES-->
    <link rel="stylesheet" href="/bower_components/bootstrap/dist/css/bootstrap.min.css">
    <link rel="stylesheet" href="/bower_components/font-awesome/css/font-awesome.min.css">
    <link rel="stylesheet" href="/bower_components/animate.css/animate.min.css">
    <link rel="stylesheet" href="/css/menu.css">
    <link rel="stylesheet" href="/css/skel.css">
    <link rel="stylesheet" href="/css/style.css">
    <link rel="stylesheet" href="/css/style-wide.css">
    <link rel="stylesheet" href="/styles/importer.css">
    <!--STYLES END-->
</head>

  <body ng-app="app" ng-controller="appCtrl">
  
         
        <div ui-view=""></div>
        <div ui-view="menuView"></div>
        <div ui-view="rootView"></div>
        <!-- <div ui-view="loginView"></div> -->
       

    <!--
        Client-side Templates
        ========================

        HTML templates are important prerequisites of modern, rich client applications.
        To work their magic, frameworks like Backbone, Angular, Ember, and Knockout require
        that you load these templates client-side.

        By default, your Gruntfile is configured to automatically load and precompile
        client-side JST templates in your `assets/linker/templates` folder, then
        include them here automatically (between TEMPLATES and TEMPLATES END).
        
        To customize this behavior to fit your needs, just edit your Gruntfile.
        For example, here are a few things you could do:

            + Import templates from other directories
            + Use a different template engine (handlebars, jade, dust, etc.)
            + Internationalize your client-side templates using a server-side
              stringfile before they're served.
    -->

    <!--TEMPLATES-->
    <script type="text/javascript" src="/jst.js"></script>
    <!--TEMPLATES END-->


    <!--

      Client-side Javascript
      ========================

      You can always bring in JS files manually with `script` tags, or asynchronously
      on the client using a solution like AMD (RequireJS).  Or, if you like, you can 
      take advantage of Sails' conventional asset pipeline (boilerplate Gruntfile).

      By default, filesin your `assets/linker/js` folder are included here
      automatically (between SCRIPTS and SCRIPTS END).  Both JavaScript (.js) and
      CoffeeScript (.coffee) are supported. In production, your scripts will be minified
      and concatenated into a single file.
      
      To customize any part of the built-in behavior, just edit your Gruntfile.
      For example, here are a few things you could do:
          
          + Change the order of your scripts
          + Import scripts from other directories
          + Use a different preprocessor, like TypeScript

    -->

    <!--SCRIPTS-->
    <script src="/bower_components/jquery/dist/jquery.min.js"></script>
    <script src="/bower_components/bootstrap/dist/js/bootstrap.min.js"></script>
    <script src="/bower_components/wow/dist/wow.min.js"></script>
    <script src="/bower_components/sharrre/jquery.sharrre.min.js"></script>
    <script src="/bower_components/fitvids/jquery.fitvids.js"></script>
    <script src="/js/dependencies/backstretch.js"></script>
    <script src="/js/dependencies/jquery-ui-custom.js"></script>
    <script src="/js/dependencies/lodash.js"></script>
    <script src="/js/dependencies/myfunctionsTools.js"></script>
    <script src="/js/dependencies/prettyembed.js"></script>
    <script src="/js/dependencies/sails.io.js"></script>
    <script src="/js/dependencies/skel.min.js"></script>
    <script src="/js/menu.js"></script>
    <!--SCRIPTS END-->
  </body>
</html>